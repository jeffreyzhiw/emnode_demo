import koa from 'koa';
import bodyParser from 'koa-bodyparser';
import session from 'koa-generic-session';
import MongoStore from 'koa-generic-session-mongo';
import path from 'path';
import serve from 'koa-static-cache';
import views from 'co-view';

import config from '../../../../global.config';
import { loggerMiddleware, getLogger } from '../../common/logger';
import { transformDate } from '../../common/libs/utils';

const log = getLogger('app');
const STATIC_FILES_MAP = {};
const SERVE_OPTIONS = { prefix: config.app.publicPath, maxAge: 365 * 24 * 60 * 60 };

export default function (app) {
  if (!config.app.keys) {
    throw new Error('Please add session secret key in the config file!');
  }
  app.keys = config.app.keys;

  /**
   * 请求日志
   */
  app.use(loggerMiddleware('app'));

  /**
   * 全局错误处理
   */
  app.use(function* errorHandler(next) {
    try {
      yield next;

      if (!this.status) {
        this.status = 200;
      }
    } catch (e) {
      this.status = 500;
      log.error('\n========================== 系统错误 ==========================\n');
      log.error(e.stack);
      this.body = { error: e.toString().replace(/^(Error: )/, ''), errors: e.errors };
    }
  });

  /**
   * 全局超时控制
   */
  app.use(function* setTimeout(next) {
    this.req.setTimeout(0);
    yield next;
  });

  if (config.app.env === 'production') {
    app.use(serve(path.resolve(config.app.outputPath, 'client'), SERVE_OPTIONS, STATIC_FILES_MAP));
  }

  app.use(function* templateRender(next) {
    const indexPath = config.app.env === 'production'
      ? config.app.outputPath
      : path.resolve(config.app.appPath, 'templates');

    this.render = views(indexPath, {
      map: { html: 'swig' },
      cache: config.app.env === 'development' ? 'memory' : false,
    });
    yield next;
  });

  app.use(session({
    key: 'maintenance_fund_management_system.sid',
    store: new MongoStore({ url: config.mongo.url }),
    // rolling: true,
    cookie: {
      maxage: null,
    }
  }));

  app.use(bodyParser());

  /**
   * 解决 fetch 或 falcor 中进行 post/put 请求时，
   * 将 body 中被 JSON.stringify 的 Date 类型进行还原
   */
  app.use( function* (next) {
    this.request.body = JSON.parse(JSON.stringify(this.request.body), transformDate);
    yield next;
  });
}
